import org.eclipse.collections.api.*
import su.jfdev.ekollections.iterator.*
import java.util.*

inline operator fun #PRIM#Iterable.iterator() = #prim#Iterator().iterator()
inline operator fun #PRIM#Iterable.contains(other: #PRIM#Iterable): Boolean = containsAll(other)

inline infix fun #PRIM#Iterable.iterate(procedure: (#PRIM#) -> Unit) = #prim#Iterator().iterate(procedure)

inline infix fun #PRIM#Iterable.all(crossinline condition: (#PRIM#) -> Boolean) = #prim#Iterator().all(condition)
inline infix fun #PRIM#Iterable.none(crossinline condition: (#PRIM#) -> Boolean) = #prim#Iterator().none(condition)
inline infix fun #PRIM#Iterable.count(crossinline condition: (#PRIM#) -> Boolean) = #prim#Iterator().count(condition)
inline infix fun #PRIM#Iterable.any(crossinline condition: (#PRIM#) -> Boolean) = #prim#Iterator().any(condition)

inline infix fun #PRIM#Iterable.`index of last`(crossinline condition: (#PRIM#) -> Boolean)  = #prim#Iterator().`index of last`(condition)
inline infix fun #PRIM#Iterable.`index of first`(crossinline condition: (#PRIM#) -> Boolean)  = #prim#Iterator().`index of first`(condition)

inline infix fun #PRIM#Iterable.first(crossinline condition: (#PRIM#) -> Boolean)  = #prim#Iterator().first(condition)
inline fun #PRIM#Iterable.firstOr(elseReturn: #PRIM#, crossinline condition: (#PRIM#) -> Boolean) = #prim#Iterator().firstOr(elseReturn, condition)

inline infix fun #PRIM#Iterable.last(crossinline condition: (#PRIM#) -> Boolean)  = #prim#Iterator().last(condition)
inline fun #PRIM#Iterable.lastOr(elseReturn: #PRIM#, crossinline condition: (#PRIM#) -> Boolean) = #prim#Iterator().lastOr(elseReturn, condition)

inline infix fun #PRIM#Iterable.single(crossinline condition: (#PRIM#) -> Boolean)  = #prim#Iterator().single(condition)
inline fun #PRIM#Iterable.singleOr(elseReturn: #PRIM#, crossinline condition: (#PRIM#) -> Boolean) = #prim#Iterator().singleOr(elseReturn, condition)