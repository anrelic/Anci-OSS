package su.jfdev.codegen

import java.io.*

class CodeGen(val pack: Pack, type: String) {
    fun generate() = write {
        appendln("""@file:JvmName("${name}Util")""")
        appendln("""@file:Suppress("NOTHING_TO_INLINE")""")
        appendln("@file:JvmMultifileClass")
        appendln("package $pack")
        appendln()
        appendln("/* Generated by Jamefrus */")
        appendln()
        appendln(code)
    }

    val name: String = pack.name
    val out = File(pack.output, "$name${type.capitalize()}.kt").apply {
        parentFile.mkdirs()
        parentFile.createNewFile()
    }
    val properties = file(pack.pack, "$name.$type.properties") ?: file(pack.pack, "$name.properties")

    val primitive = Def.primitives[type] ?: emptyMap()

    val replacements: Map<String, String> = when (properties) {
        null -> primitive
        else -> properties.readLines().associate { toProperty(it) } + primitive
    }

    val code = run {
        var code: String = pack.code.readText()
        val properties = code.lineSequence()
                .filter { it.startsWith("//#") }
                .map { it.substringAfter("//#") }
                .associate { toProperty(it) }
        for ((key, value) in replacements + properties) {
            code = code.replace("#$key#", value)
        }
        code
    }

    private fun toProperty(it: String) = it.substringBefore('=') to it.substringAfter('=')


    fun write(writing: BufferedWriter.() -> Unit) = out.bufferedWriter().use(writing)
}