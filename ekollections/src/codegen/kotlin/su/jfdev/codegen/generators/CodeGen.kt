package su.jfdev.codegen.generators

import su.jfdev.codegen.*
import java.io.*
import java.util.*

abstract class CodeGen(val pack: Pack, type: String, replaceProperties: Boolean = true) {
    val name = pack.name
    val properties = file(pack.pack, "$name.$type.properties") ?: file(pack.pack, "$name.properties")
    val out = File(pack.output, "$name${type.capitalize()}.kt").apply {
        parentFile.mkdirs()
        createNewFile()
    }

    val replacements: MutableMap<String, String> = HashMap()
    val prePackage: MutableList<String> = ArrayList()

    fun annotation(annotation: String) {
        prePackage += "@file:$annotation"
    }

    init {
        if (replaceProperties && properties != null)
            properties.readLines().associateTo(replacements) { toProperty(it) }
    }

    protected fun toProperty(it: String) = it.substringBefore('=') to it.substringAfter('=')

    fun generate() = out.bufferedWriter().run {
        for (pre in prePackage) {
            appendln(pre)
        }
        appendln("package $pack")
        appendln()
        appendln("/* Generated by Jamefrus */")
        appendln()
        generate()
    }

    abstract fun BufferedWriter.generate()
}